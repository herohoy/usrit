package com.today36524.api.user;

      import com.github.dapeng.core.*;
      import com.github.dapeng.org.apache.thrift.*;
      import java.util.ServiceLoader;
      import com.today36524.api.user.UserServiceCodec.*;
      import com.today36524.api.user.service.UserService;

      /**
       * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

      **/
      public class UserServiceClient implements UserService{
        private final String serviceName;
        private final String version;

        private SoaConnectionPool pool;

      public UserServiceClient() {
        this.serviceName = "com.today36524.api.user.service.UserService";
        this.version = "1.0.0";

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class);
        for (SoaConnectionPoolFactory factory: factories) {
          this.pool = factory.getPool();
          break;
        }
        this.pool.registerClientInfo(serviceName,version);
      }

      
        
       /**
       * 

    ### 用户注册

    #### 业务描述
        用户注册账户，用户密码需要加盐之后存储(加盐方案还么确定,小伙伴可以自己随意设计个简单的加解密方案)

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.RegisterUserRequest

    #### 前置检查
        1. 手机号码规则验证
        2. 手机号未被使用验证
        3. 密码规则,字母数字八位混合

    ####  逻辑处理
        1.密码加盐处理
        2.新增一条user记录
        3.返回结果 user_response.RegisterUserResponse

    #### 数据库变更
        1. insert into user() values()

    ####  事务处理
        无

    ####  输出
        1.user_response.RegisterUserResponse

       **/
          
            public com.today36524.api.user.response.RegisterUserResponse registerUser(com.today36524.api.user.request.RegisterUserRequest request) throws SoaException{

              String methodName = "registerUser";

              registerUser_args registerUser_args = new registerUser_args();
              registerUser_args.setRequest(request);
                

              registerUser_result response = pool.send(serviceName,version,"registerUser",registerUser_args, new RegisterUser_argsSerializer(), new RegisterUser_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 用户登录

    #### 业务描述
       用户登录

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.LoginUserRequest

    #### 前置检查
        1.手机号码规则验证
        2.密码规则,字母数字八位混合

    ####  逻辑处理
        1. 根据手机号码和密码查询用户记录
        2. 异常用户状态的用户登录返回 Exception

    #### 数据库变更
        1. select *  from user where telphone = ? and password = ?

    ####  事务处理
        无

    ####  输出
        1.user_response.LoginUserResponse

       **/
          
            public com.today36524.api.user.response.LoginUserResponse login(com.today36524.api.user.request.LoginUserRequest request) throws SoaException{

              String methodName = "login";

              login_args login_args = new login_args();
              login_args.setRequest(request);
                

              login_result response = pool.send(serviceName,version,"login",login_args, new Login_argsSerializer(), new Login_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 用户修改个人资料

    #### 业务描述
       用户再注册之后完善个人资料,完善资料增加积分5

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.ModifyUserRequest

    #### 前置检查
        1. 邮箱规则验证
        2. qq 规则验证
        3. 用户状态判断只有用户状态为

    ####  逻辑处理
        1. 根据输入的参数计算用户积分
        2. 修改用户 email qq
        2. 修改完成之后调用积分action增加用户积分(完善资料增加积分5) ChangeUserIntegralAction

    #### 数据库变更
        1. update user set email = ? , qq = ? where id = ${userId}

    ####  事务处理
        1. 无

    ####  输出
        1.user_response.ModifyUserAction

       **/
          
            public com.today36524.api.user.response.ModifyUserResponse modifyUser(com.today36524.api.user.request.ModifyUserRequest request) throws SoaException{

              String methodName = "modifyUser";

              modifyUser_args modifyUser_args = new modifyUser_args();
              modifyUser_args.setRequest(request);
                

              modifyUser_result response = pool.send(serviceName,version,"modifyUser",modifyUser_args, new ModifyUser_argsSerializer(), new ModifyUser_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 冻结用户接口

    #### 业务描述
       用户因为触犯一些游戏规则,后台自检程序或者管理员会冻结该用户

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.FreezeUserRequest

    #### 前置检查
        1.用户状态检查(已冻结,已拉黑,已逻辑删除的用户不能冻结)

    ####  逻辑处理
        1. 设置用户状态为 FREEZE

    #### 数据库变更
        1. update user set status = ? , remark = ? where id = ${userId}

    ####  事务处理
        1. 无

    ####  输出
        1.user_response.FreezeUserResponse

       **/
          
            public com.today36524.api.user.response.FreezeUserResponse freezeUser(com.today36524.api.user.request.FreezeUserRequest request) throws SoaException{

              String methodName = "freezeUser";

              freezeUser_args freezeUser_args = new freezeUser_args();
              freezeUser_args.setRequest(request);
                

              freezeUser_result response = pool.send(serviceName,version,"freezeUser",freezeUser_args, new FreezeUser_argsSerializer(), new FreezeUser_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 拉黑用户接口

    #### 业务描述
       用户因为触犯一些游戏规则,后台自检程序或者管理员会拉黑该用户,拉黑用户把用户的积分置为0

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.BlackUserRequest

    #### 前置检查
        1.用户状态检查(已冻结,已拉黑,已逻辑删除的用户不能拉黑)

    ####  逻辑处理
        1. 设置用户状态为  BLACK
        2. 调用积分修改接口 ChangeUserIntegralAction

    #### 数据库变更
        1. update user set status = ? , remark = ? where id = ${userId}

    ####  事务处理
        1. 无

    ####  输出
        1.user_response.BlackUserResponse

       **/
          
            public com.today36524.api.user.response.BlackUserResponse blackUser(com.today36524.api.user.request.BlackUserRequest request) throws SoaException{

              String methodName = "blackUser";

              blackUser_args blackUser_args = new blackUser_args();
              blackUser_args.setRequest(request);
                

              blackUser_result response = pool.send(serviceName,version,"blackUser",blackUser_args, new BlackUser_argsSerializer(), new BlackUser_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 记录积分改变流水

    #### 业务描述
       用户因为完成一些游戏规则或者触犯游戏规则导致积分减少或者增加,调用该接口修改用户积分

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.ChangeIntegralRequest

    #### 前置检查
        1.用户状态检查(已冻结,已拉黑,已逻辑删除的用户不能冻结)

    ####  逻辑处理
        1. 设置用户状态为 FREEZE

    #### 数据库变更
        1. update user set integral = ?  where id = ${userId}
        2. insert into integral_journal() values()

    ####  事务处理
        1. 无

    ####  输出
        1. i32 流水 Id

       **/
          
            public Integer changeUserIntegral(com.today36524.api.user.request.ChangeIntegralRequest request) throws SoaException{

              String methodName = "changeUserIntegral";

              changeUserIntegral_args changeUserIntegral_args = new changeUserIntegral_args();
              changeUserIntegral_args.setRequest(request);
                

              changeUserIntegral_result response = pool.send(serviceName,version,"changeUserIntegral",changeUserIntegral_args, new ChangeUserIntegral_argsSerializer(), new ChangeUserIntegral_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 解冻用户接口

    #### 业务描述
       用户被冻结后，由于申请恢复或申诉错误操作并得到认可，对该用户进行解冻操作

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.UnreezeUserRequest

    #### 前置检查
        1.用户状态检查(未冻结,已拉黑,已逻辑删除的用户不能解冻)

    ####  逻辑处理
        1. 设置用户状态为 ACTIVATED

    #### 数据库变更
        1. update user set status = ? , remark = ? where id = ${userId}

    ####  事务处理
        1. 无

    ####  输出
        1.user_response.UnfreezeUserResponse

       **/
          
            public com.today36524.api.user.response.UnfreezeUserResponse unfreezeUser(com.today36524.api.user.request.UnfreezeUserRequest request) throws SoaException{

              String methodName = "unfreezeUser";

              unfreezeUser_args unfreezeUser_args = new unfreezeUser_args();
              unfreezeUser_args.setRequest(request);
                

              unfreezeUser_result response = pool.send(serviceName,version,"unfreezeUser",unfreezeUser_args, new UnfreezeUser_argsSerializer(), new UnfreezeUser_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 查询单个用户接口

    #### 业务描述
       通过用户id查询单个用户

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.GetUserRequest

    #### 前置检查
        1.用户id格式检查（非法id不能通过检查）

    ####  逻辑处理
        1. 查询单个用户并返回

    #### 数据库变更
        1. 无

    ####  事务处理
        1. 无

    ####  输出
        1.user_response.GetUserResponse

       **/
          
            public com.today36524.api.user.response.GetUserResponse getUser(com.today36524.api.user.request.GetUserRequest request) throws SoaException{

              String methodName = "getUser";

              getUser_args getUser_args = new getUser_args();
              getUser_args.setRequest(request);
                

              getUser_result response = pool.send(serviceName,version,"getUser",getUser_args, new GetUser_argsSerializer(), new GetUser_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 手机号查询单个用户接口

    #### 业务描述
       通过用户手机号查询单个用户

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.GetUserByTelephoneRequest

    #### 前置检查
        1.用户手机号格式检查（非法手机号不能通过检查）

    ####  逻辑处理
        1. 查询单个用户并返回，未查询到或查询到多个将报错

    #### 数据库变更
        1. 无

    ####  事务处理
        1. 无

    ####  输出
        1.user_response.GetUserResponse

       **/
          
            public com.today36524.api.user.response.GetUserResponse getUserByTelephone(com.today36524.api.user.request.GetUserByTelephoneRequest request) throws SoaException{

              String methodName = "getUserByTelephone";

              getUserByTelephone_args getUserByTelephone_args = new getUserByTelephone_args();
              getUserByTelephone_args.setRequest(request);
                

              getUserByTelephone_result response = pool.send(serviceName,version,"getUserByTelephone",getUserByTelephone_args, new GetUserByTelephone_argsSerializer(), new GetUserByTelephone_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        
        
       /**
       * 

    ### 分页查询用户接口

    #### 业务描述
       通过组合参数对用户数据进行分页查询

    #### 接口依赖
        无
    #### 边界异常说明
        无

    #### 输入
        1.user_request.FindUsersByPageRequest

    #### 前置检查
        1.相关参数格式检查（非法参数不能通过检查）

    ####  逻辑处理
        1. 分页查询用户数据，返回分页相关信息和用户列表，未查询到返回空列表

    #### 数据库变更
        1. 无

    ####  事务处理
        1. 无

    ####  输出
        1.user_response.FindUsersByPageResponse

       **/
          
            public com.today36524.api.user.response.FindUsersByPageResponse findUsersByPage(com.today36524.api.user.request.FindUsersByPageRequest request) throws SoaException{

              String methodName = "findUsersByPage";

              findUsersByPage_args findUsersByPage_args = new findUsersByPage_args();
              findUsersByPage_args.setRequest(request);
                

              findUsersByPage_result response = pool.send(serviceName,version,"findUsersByPage",findUsersByPage_args, new FindUsersByPage_argsSerializer(), new FindUsersByPage_resultSerializer());

              
                  
                      return response.getSuccess();
                    
                
          }
          
        

        

      /**
      * getServiceMetadata
      **/
      public String getServiceMetadata() throws SoaException {
        String methodName = "getServiceMetadata";
          getServiceMetadata_args getServiceMetadata_args = new getServiceMetadata_args();
          getServiceMetadata_result response = pool.send(serviceName,version,methodName,getServiceMetadata_args, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          return response.getSuccess();
      }

      }
    