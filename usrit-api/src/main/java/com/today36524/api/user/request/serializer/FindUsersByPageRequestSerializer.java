 package com.today36524.api.user.request.serializer;
        import com.today36524.api.common.domain.serializer.*;import com.today36524.api.user.response.serializer.*;import com.today36524.api.user.request.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class FindUsersByPageRequestSerializer implements BeanSerializer<com.today36524.api.user.request.FindUsersByPageRequest>{
        
      @Override
      public com.today36524.api.user.request.FindUsersByPageRequest read(TProtocol iprot) throws TException{

      com.today36524.api.user.request.FindUsersByPageRequest bean = new com.today36524.api.user.request.FindUsersByPageRequest();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setUserName(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setTelephone(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setEmail(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setQq(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.I32){
              com.today36524.api.user.enums.UserStatusEnum elem0 = com.today36524.api.user.enums.UserStatusEnum.findByValue(iprot.readI32());
       bean.setStatus(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setCreatedAtBg(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setCreatedAtEd(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setUpdatedByBg(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setUpdatedByEd(Optional.of(elem0));
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.common.domain.PageRequest elem0 = new com.today36524.api.common.domain.PageRequest();
        elem0=new com.today36524.api.common.domain.serializer.PageRequestSerializer().read(iprot);
       bean.setPageRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.today36524.api.user.request.FindUsersByPageRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("FindUsersByPageRequest"));

      if(bean.getUserName().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("userName", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 1));
              String elem0 = bean.getUserName().get();
              oprot.writeString(elem0);
              
            }
            if(bean.getTelephone().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("telephone", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 2));
              String elem1 = bean.getTelephone().get();
              oprot.writeString(elem1);
              
            }
            if(bean.getEmail().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("email", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 3));
              String elem2 = bean.getEmail().get();
              oprot.writeString(elem2);
              
            }
            if(bean.getQq().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("qq", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 4));
              String elem3 = bean.getQq().get();
              oprot.writeString(elem3);
              
            }
            if(bean.getStatus().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("status", com.github.dapeng.org.apache.thrift.protocol.TType.I32, (short) 5));
              com.today36524.api.user.enums.UserStatusEnum elem4 = bean.getStatus().get();
              oprot.writeI32(elem4.getValue());
              
            }
            if(bean.getCreatedAtBg().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("createdAtBg", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 6));
              String elem5 = bean.getCreatedAtBg().get();
              oprot.writeString(elem5);
              
            }
            if(bean.getCreatedAtEd().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("createdAtEd", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 7));
              String elem6 = bean.getCreatedAtEd().get();
              oprot.writeString(elem6);
              
            }
            if(bean.getUpdatedByBg().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("updatedByBg", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 8));
              String elem7 = bean.getUpdatedByBg().get();
              oprot.writeString(elem7);
              
            }
            if(bean.getUpdatedByEd().isPresent()){
              oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("updatedByEd", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 9));
              String elem8 = bean.getUpdatedByEd().get();
              oprot.writeString(elem8);
              
            }
            
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("pageRequest", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 10));
            com.today36524.api.common.domain.PageRequest elem9 = bean.getPageRequest();
             new com.today36524.api.common.domain.serializer.PageRequestSerializer().write(elem9, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.today36524.api.user.request.FindUsersByPageRequest bean) throws TException{
      
              if(bean.getPageRequest() == null)
              throw new SoaException(SoaCode.NotNull, "pageRequest字段不允许为空");
            
                if(bean.getPageRequest() != null)
                new com.today36524.api.common.domain.serializer.PageRequestSerializer().validate(bean.getPageRequest());
              
    }
    
        @Override
        public String toString(com.today36524.api.user.request.FindUsersByPageRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      