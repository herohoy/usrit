package com.today36524.api.user;
        import com.today36524.api.common.domain.serializer.*;import com.today36524.api.user.response.serializer.*;import com.today36524.api.user.request.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import com.github.dapeng.core.definition.SoaServiceDefinition;
        import com.github.dapeng.core.definition.SoaFunctionDefinition;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.0.0-SNAPSHOT)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class UserServiceCodec {

        
            public static class registerUser_args {
            
                private com.today36524.api.user.request.RegisterUserRequest request;
                public com.today36524.api.user.request.RegisterUserRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.RegisterUserRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class registerUser_result {

            
                  private com.today36524.api.user.response.RegisterUserResponse success;
                  public com.today36524.api.user.response.RegisterUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.RegisterUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class RegisterUser_argsSerializer implements BeanSerializer<registerUser_args>{
            
      @Override
      public registerUser_args read(TProtocol iprot) throws TException{

      registerUser_args bean = new registerUser_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.RegisterUserRequest elem0 = new com.today36524.api.user.request.RegisterUserRequest();
        elem0=new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(registerUser_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("registerUser_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.RegisterUserRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(registerUser_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(registerUser_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class RegisterUser_resultSerializer implements BeanSerializer<registerUser_result>{
            @Override
            public registerUser_result read(TProtocol iprot) throws TException{

              registerUser_result bean = new registerUser_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.RegisterUserResponse elem0 = new com.today36524.api.user.response.RegisterUserResponse();
        elem0=new com.today36524.api.user.response.serializer.RegisterUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(registerUser_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("registerUser_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.RegisterUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.RegisterUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(registerUser_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.RegisterUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(registerUser_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class registerUser<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, registerUser_args, registerUser_result>
            {
              public registerUser()
              {
                super("registerUser", new RegisterUser_argsSerializer(),  new RegisterUser_resultSerializer());
              }

              @Override
              public registerUser_result apply(I iface, registerUser_args registerUser_args) throws SoaException
              {

                registerUser_result result = new registerUser_result();


                
                result.success = iface.registerUser(registerUser_args.request);
                

                return result;

              }

            }
          
            public static class login_args {
            
                private com.today36524.api.user.request.LoginUserRequest request;
                public com.today36524.api.user.request.LoginUserRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.LoginUserRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class login_result {

            
                  private com.today36524.api.user.response.LoginUserResponse success;
                  public com.today36524.api.user.response.LoginUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.LoginUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class Login_argsSerializer implements BeanSerializer<login_args>{
            
      @Override
      public login_args read(TProtocol iprot) throws TException{

      login_args bean = new login_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.LoginUserRequest elem0 = new com.today36524.api.user.request.LoginUserRequest();
        elem0=new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(login_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("login_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.LoginUserRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(login_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(login_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class Login_resultSerializer implements BeanSerializer<login_result>{
            @Override
            public login_result read(TProtocol iprot) throws TException{

              login_result bean = new login_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.LoginUserResponse elem0 = new com.today36524.api.user.response.LoginUserResponse();
        elem0=new com.today36524.api.user.response.serializer.LoginUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(login_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("login_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.LoginUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.LoginUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(login_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.LoginUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(login_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class login<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, login_args, login_result>
            {
              public login()
              {
                super("login", new Login_argsSerializer(),  new Login_resultSerializer());
              }

              @Override
              public login_result apply(I iface, login_args login_args) throws SoaException
              {

                login_result result = new login_result();


                
                result.success = iface.login(login_args.request);
                

                return result;

              }

            }
          
            public static class modifyUser_args {
            
                private com.today36524.api.user.request.ModifyUserRequest request;
                public com.today36524.api.user.request.ModifyUserRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.ModifyUserRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class modifyUser_result {

            
                  private com.today36524.api.user.response.ModifyUserResponse success;
                  public com.today36524.api.user.response.ModifyUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.ModifyUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ModifyUser_argsSerializer implements BeanSerializer<modifyUser_args>{
            
      @Override
      public modifyUser_args read(TProtocol iprot) throws TException{

      modifyUser_args bean = new modifyUser_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.ModifyUserRequest elem0 = new com.today36524.api.user.request.ModifyUserRequest();
        elem0=new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(modifyUser_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("modifyUser_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.ModifyUserRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(modifyUser_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(modifyUser_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ModifyUser_resultSerializer implements BeanSerializer<modifyUser_result>{
            @Override
            public modifyUser_result read(TProtocol iprot) throws TException{

              modifyUser_result bean = new modifyUser_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.ModifyUserResponse elem0 = new com.today36524.api.user.response.ModifyUserResponse();
        elem0=new com.today36524.api.user.response.serializer.ModifyUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(modifyUser_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("modifyUser_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.ModifyUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.ModifyUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(modifyUser_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.ModifyUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(modifyUser_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class modifyUser<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, modifyUser_args, modifyUser_result>
            {
              public modifyUser()
              {
                super("modifyUser", new ModifyUser_argsSerializer(),  new ModifyUser_resultSerializer());
              }

              @Override
              public modifyUser_result apply(I iface, modifyUser_args modifyUser_args) throws SoaException
              {

                modifyUser_result result = new modifyUser_result();


                
                result.success = iface.modifyUser(modifyUser_args.request);
                

                return result;

              }

            }
          
            public static class freezeUser_args {
            
                private com.today36524.api.user.request.FreezeUserRequest request;
                public com.today36524.api.user.request.FreezeUserRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.FreezeUserRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class freezeUser_result {

            
                  private com.today36524.api.user.response.FreezeUserResponse success;
                  public com.today36524.api.user.response.FreezeUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.FreezeUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FreezeUser_argsSerializer implements BeanSerializer<freezeUser_args>{
            
      @Override
      public freezeUser_args read(TProtocol iprot) throws TException{

      freezeUser_args bean = new freezeUser_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.FreezeUserRequest elem0 = new com.today36524.api.user.request.FreezeUserRequest();
        elem0=new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(freezeUser_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("freezeUser_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.FreezeUserRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(freezeUser_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(freezeUser_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FreezeUser_resultSerializer implements BeanSerializer<freezeUser_result>{
            @Override
            public freezeUser_result read(TProtocol iprot) throws TException{

              freezeUser_result bean = new freezeUser_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.FreezeUserResponse elem0 = new com.today36524.api.user.response.FreezeUserResponse();
        elem0=new com.today36524.api.user.response.serializer.FreezeUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(freezeUser_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("freezeUser_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.FreezeUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.FreezeUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(freezeUser_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.FreezeUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(freezeUser_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class freezeUser<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, freezeUser_args, freezeUser_result>
            {
              public freezeUser()
              {
                super("freezeUser", new FreezeUser_argsSerializer(),  new FreezeUser_resultSerializer());
              }

              @Override
              public freezeUser_result apply(I iface, freezeUser_args freezeUser_args) throws SoaException
              {

                freezeUser_result result = new freezeUser_result();


                
                result.success = iface.freezeUser(freezeUser_args.request);
                

                return result;

              }

            }
          
            public static class blackUser_args {
            
                private com.today36524.api.user.request.BlackUserRequest request;
                public com.today36524.api.user.request.BlackUserRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.BlackUserRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class blackUser_result {

            
                  private com.today36524.api.user.response.BlackUserResponse success;
                  public com.today36524.api.user.response.BlackUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.BlackUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class BlackUser_argsSerializer implements BeanSerializer<blackUser_args>{
            
      @Override
      public blackUser_args read(TProtocol iprot) throws TException{

      blackUser_args bean = new blackUser_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.BlackUserRequest elem0 = new com.today36524.api.user.request.BlackUserRequest();
        elem0=new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(blackUser_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("blackUser_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.BlackUserRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(blackUser_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(blackUser_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class BlackUser_resultSerializer implements BeanSerializer<blackUser_result>{
            @Override
            public blackUser_result read(TProtocol iprot) throws TException{

              blackUser_result bean = new blackUser_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.BlackUserResponse elem0 = new com.today36524.api.user.response.BlackUserResponse();
        elem0=new com.today36524.api.user.response.serializer.BlackUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(blackUser_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("blackUser_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.BlackUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.BlackUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(blackUser_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.BlackUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(blackUser_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class blackUser<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, blackUser_args, blackUser_result>
            {
              public blackUser()
              {
                super("blackUser", new BlackUser_argsSerializer(),  new BlackUser_resultSerializer());
              }

              @Override
              public blackUser_result apply(I iface, blackUser_args blackUser_args) throws SoaException
              {

                blackUser_result result = new blackUser_result();


                
                result.success = iface.blackUser(blackUser_args.request);
                

                return result;

              }

            }
          
            public static class changeUserIntegral_args {
            
                private com.today36524.api.user.request.ChangeIntegralRequest request;
                public com.today36524.api.user.request.ChangeIntegralRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.ChangeIntegralRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class changeUserIntegral_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ChangeUserIntegral_argsSerializer implements BeanSerializer<changeUserIntegral_args>{
            
      @Override
      public changeUserIntegral_args read(TProtocol iprot) throws TException{

      changeUserIntegral_args bean = new changeUserIntegral_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.ChangeIntegralRequest elem0 = new com.today36524.api.user.request.ChangeIntegralRequest();
        elem0=new com.today36524.api.user.request.serializer.ChangeIntegralRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(changeUserIntegral_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("changeUserIntegral_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.ChangeIntegralRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.ChangeIntegralRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(changeUserIntegral_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.ChangeIntegralRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(changeUserIntegral_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ChangeUserIntegral_resultSerializer implements BeanSerializer<changeUserIntegral_result>{
            @Override
            public changeUserIntegral_result read(TProtocol iprot) throws TException{

              changeUserIntegral_result bean = new changeUserIntegral_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(changeUserIntegral_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("changeUserIntegral_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(changeUserIntegral_result bean) throws TException{
      
    }
    

            @Override
            public String toString(changeUserIntegral_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class changeUserIntegral<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, changeUserIntegral_args, changeUserIntegral_result>
            {
              public changeUserIntegral()
              {
                super("changeUserIntegral", new ChangeUserIntegral_argsSerializer(),  new ChangeUserIntegral_resultSerializer());
              }

              @Override
              public changeUserIntegral_result apply(I iface, changeUserIntegral_args changeUserIntegral_args) throws SoaException
              {

                changeUserIntegral_result result = new changeUserIntegral_result();


                
                result.success = iface.changeUserIntegral(changeUserIntegral_args.request);
                

                return result;

              }

            }
          
            public static class unfreezeUser_args {
            
                private com.today36524.api.user.request.UnfreezeUserRequest request;
                public com.today36524.api.user.request.UnfreezeUserRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.UnfreezeUserRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class unfreezeUser_result {

            
                  private com.today36524.api.user.response.UnfreezeUserResponse success;
                  public com.today36524.api.user.response.UnfreezeUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.UnfreezeUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class UnfreezeUser_argsSerializer implements BeanSerializer<unfreezeUser_args>{
            
      @Override
      public unfreezeUser_args read(TProtocol iprot) throws TException{

      unfreezeUser_args bean = new unfreezeUser_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.UnfreezeUserRequest elem0 = new com.today36524.api.user.request.UnfreezeUserRequest();
        elem0=new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(unfreezeUser_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("unfreezeUser_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.UnfreezeUserRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(unfreezeUser_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(unfreezeUser_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UnfreezeUser_resultSerializer implements BeanSerializer<unfreezeUser_result>{
            @Override
            public unfreezeUser_result read(TProtocol iprot) throws TException{

              unfreezeUser_result bean = new unfreezeUser_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.UnfreezeUserResponse elem0 = new com.today36524.api.user.response.UnfreezeUserResponse();
        elem0=new com.today36524.api.user.response.serializer.UnfreezeUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(unfreezeUser_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("unfreezeUser_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.UnfreezeUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.UnfreezeUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(unfreezeUser_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.UnfreezeUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(unfreezeUser_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class unfreezeUser<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, unfreezeUser_args, unfreezeUser_result>
            {
              public unfreezeUser()
              {
                super("unfreezeUser", new UnfreezeUser_argsSerializer(),  new UnfreezeUser_resultSerializer());
              }

              @Override
              public unfreezeUser_result apply(I iface, unfreezeUser_args unfreezeUser_args) throws SoaException
              {

                unfreezeUser_result result = new unfreezeUser_result();


                
                result.success = iface.unfreezeUser(unfreezeUser_args.request);
                

                return result;

              }

            }
          
            public static class getUser_args {
            
                private com.today36524.api.user.request.GetUserRequest request;
                public com.today36524.api.user.request.GetUserRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.GetUserRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getUser_result {

            
                  private com.today36524.api.user.response.GetUserResponse success;
                  public com.today36524.api.user.response.GetUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.GetUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetUser_argsSerializer implements BeanSerializer<getUser_args>{
            
      @Override
      public getUser_args read(TProtocol iprot) throws TException{

      getUser_args bean = new getUser_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.GetUserRequest elem0 = new com.today36524.api.user.request.GetUserRequest();
        elem0=new com.today36524.api.user.request.serializer.GetUserRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getUser_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUser_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.GetUserRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.GetUserRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getUser_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.GetUserRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(getUser_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetUser_resultSerializer implements BeanSerializer<getUser_result>{
            @Override
            public getUser_result read(TProtocol iprot) throws TException{

              getUser_result bean = new getUser_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.GetUserResponse elem0 = new com.today36524.api.user.response.GetUserResponse();
        elem0=new com.today36524.api.user.response.serializer.GetUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getUser_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUser_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.GetUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.GetUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getUser_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.GetUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getUser_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getUser<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, getUser_args, getUser_result>
            {
              public getUser()
              {
                super("getUser", new GetUser_argsSerializer(),  new GetUser_resultSerializer());
              }

              @Override
              public getUser_result apply(I iface, getUser_args getUser_args) throws SoaException
              {

                getUser_result result = new getUser_result();


                
                result.success = iface.getUser(getUser_args.request);
                

                return result;

              }

            }
          
            public static class getUserByTelephone_args {
            
                private com.today36524.api.user.request.GetUserByTelephoneRequest request;
                public com.today36524.api.user.request.GetUserByTelephoneRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.GetUserByTelephoneRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getUserByTelephone_result {

            
                  private com.today36524.api.user.response.GetUserResponse success;
                  public com.today36524.api.user.response.GetUserResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.GetUserResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetUserByTelephone_argsSerializer implements BeanSerializer<getUserByTelephone_args>{
            
      @Override
      public getUserByTelephone_args read(TProtocol iprot) throws TException{

      getUserByTelephone_args bean = new getUserByTelephone_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.GetUserByTelephoneRequest elem0 = new com.today36524.api.user.request.GetUserByTelephoneRequest();
        elem0=new com.today36524.api.user.request.serializer.GetUserByTelephoneRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getUserByTelephone_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUserByTelephone_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.GetUserByTelephoneRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.GetUserByTelephoneRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getUserByTelephone_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.GetUserByTelephoneRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(getUserByTelephone_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetUserByTelephone_resultSerializer implements BeanSerializer<getUserByTelephone_result>{
            @Override
            public getUserByTelephone_result read(TProtocol iprot) throws TException{

              getUserByTelephone_result bean = new getUserByTelephone_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.GetUserResponse elem0 = new com.today36524.api.user.response.GetUserResponse();
        elem0=new com.today36524.api.user.response.serializer.GetUserResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getUserByTelephone_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUserByTelephone_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.GetUserResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.GetUserResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getUserByTelephone_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.GetUserResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getUserByTelephone_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getUserByTelephone<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, getUserByTelephone_args, getUserByTelephone_result>
            {
              public getUserByTelephone()
              {
                super("getUserByTelephone", new GetUserByTelephone_argsSerializer(),  new GetUserByTelephone_resultSerializer());
              }

              @Override
              public getUserByTelephone_result apply(I iface, getUserByTelephone_args getUserByTelephone_args) throws SoaException
              {

                getUserByTelephone_result result = new getUserByTelephone_result();


                
                result.success = iface.getUserByTelephone(getUserByTelephone_args.request);
                

                return result;

              }

            }
          
            public static class findUsersByPage_args {
            
                private com.today36524.api.user.request.FindUsersByPageRequest request;
                public com.today36524.api.user.request.FindUsersByPageRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today36524.api.user.request.FindUsersByPageRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class findUsersByPage_result {

            
                  private com.today36524.api.user.response.FindUsersByPageResponse success;
                  public com.today36524.api.user.response.FindUsersByPageResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today36524.api.user.response.FindUsersByPageResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindUsersByPage_argsSerializer implements BeanSerializer<findUsersByPage_args>{
            
      @Override
      public findUsersByPage_args read(TProtocol iprot) throws TException{

      findUsersByPage_args bean = new findUsersByPage_args();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
              com.today36524.api.user.request.FindUsersByPageRequest elem0 = new com.today36524.api.user.request.FindUsersByPageRequest();
        elem0=new com.today36524.api.user.request.serializer.FindUsersByPageRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(findUsersByPage_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("findUsersByPage_args"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.today36524.api.user.request.FindUsersByPageRequest elem0 = bean.getRequest();
             new com.today36524.api.user.request.serializer.FindUsersByPageRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findUsersByPage_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today36524.api.user.request.serializer.FindUsersByPageRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(findUsersByPage_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindUsersByPage_resultSerializer implements BeanSerializer<findUsersByPage_result>{
            @Override
            public findUsersByPage_result read(TProtocol iprot) throws TException{

              findUsersByPage_result bean = new findUsersByPage_result();
              com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT){
                    com.today36524.api.user.response.FindUsersByPageResponse elem0 = new com.today36524.api.user.response.FindUsersByPageResponse();
        elem0=new com.today36524.api.user.response.serializer.FindUsersByPageResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findUsersByPage_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("findUsersByPage_result"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.today36524.api.user.response.FindUsersByPageResponse elem0 = bean.getSuccess();
             new com.today36524.api.user.response.serializer.FindUsersByPageResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findUsersByPage_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today36524.api.user.response.serializer.FindUsersByPageResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(findUsersByPage_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findUsersByPage<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, findUsersByPage_args, findUsersByPage_result>
            {
              public findUsersByPage()
              {
                super("findUsersByPage", new FindUsersByPage_argsSerializer(),  new FindUsersByPage_resultSerializer());
              }

              @Override
              public findUsersByPage_result apply(I iface, findUsersByPage_args findUsersByPage_args) throws SoaException
              {

                findUsersByPage_result result = new findUsersByPage_result();


                
                result.success = iface.findUsersByPage(findUsersByPage_args.request);
                

                return result;

              }

            }
          

        public static class getServiceMetadata_args {

          @Override
          public String toString() {
            return "{}";
          }
        }


        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }

          @Override
          public String toString() {
            StringBuilder stringBuilder = new StringBuilder("{");
              stringBuilder.append("\"").append("success").append("\":\"").append(this.success).append("\",");
              stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
              stringBuilder.append("}");

            return stringBuilder.toString();
          }
        }

        public static class GetServiceMetadata_argsSerializer implements BeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }


          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }

        }

        public static class GetServiceMetadata_resultSerializer implements BeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        public static class getServiceMetadata<I extends com.today36524.api.user.service.UserService> extends SoaFunctionDefinition.Sync<I, getServiceMetadata_args, getServiceMetadata_result> {
          public getServiceMetadata() {
            super("getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          }

          @Override
          public getServiceMetadata_result apply(I iface, getServiceMetadata_args args) {
            getServiceMetadata_result result = new getServiceMetadata_result();

            try (InputStreamReader isr = new InputStreamReader(UserServiceCodec.class.getClassLoader().getResourceAsStream("com.today36524.api.user.service.UserService.xml"));
            BufferedReader in = new BufferedReader(isr)) {
              int len = 0;
              StringBuilder str = new StringBuilder("");
              String line;
              while ((line = in.readLine()) != null) {

                if (len != 0) {
                  str.append("\r\n").append(line);
                } else {
                  str.append(line);
                }
                len++;
              }
              result.success = str.toString();

            } catch (Exception e) {
              e.printStackTrace();
              result.success = "";
            }

            return result;
          }

        }

        @SuppressWarnings("unchecked")
        public static class Processor<I extends com.today36524.api.user.service.UserService> extends SoaServiceDefinition<com.today36524.api.user.service.UserService>
        {

          public Processor(com.today36524.api.user.service.UserService iface, Class<com.today36524.api.user.service.UserService> ifaceClass)
          {
            super(iface, ifaceClass, buildMap(new java.util.HashMap<>()));
          }

          @SuppressWarnings("unchecked")
          private static <I extends com.today36524.api.user.service.UserService> java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> buildMap(java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> processMap)
          {
            
                processMap.put("registerUser", new registerUser());
              
                processMap.put("login", new login());
              
                processMap.put("modifyUser", new modifyUser());
              
                processMap.put("freezeUser", new freezeUser());
              
                processMap.put("blackUser", new blackUser());
              
                processMap.put("changeUserIntegral", new changeUserIntegral());
              
                processMap.put("unfreezeUser", new unfreezeUser());
              
                processMap.put("getUser", new getUser());
              
                processMap.put("getUserByTelephone", new getUserByTelephone());
              
                processMap.put("findUsersByPage", new findUsersByPage());
              
            processMap.put("getServiceMetadata", new getServiceMetadata());
            return processMap;
          }
        }

      }
      