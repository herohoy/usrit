package com.today36524.api.user.scala
        import com.today36524.api.user.scala.request.serializer._;import com.today36524.api.common.scala.domain.serializer._;import com.today36524.api.user.scala.response.serializer._;

        import com.github.dapeng.core._
        import com.github.dapeng.org.apache.thrift._
        import com.github.dapeng.org.apache.thrift.protocol._
        import com.github.dapeng.core.definition._

        import scala.concurrent.ExecutionContext.Implicits.global
        import java.util.concurrent.{CompletableFuture, Future}
        import scala.util.{Failure, Success}

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        object UserServiceAsyncCodec {

        implicit class FutureX[T](f: scala.concurrent.Future[T]) {
          def tojava(): CompletableFuture[T] = {
            val java = new CompletableFuture[T]()
            f.onComplete{
              case Success(x) => java.complete(x)
              case Failure(ex) => java.completeExceptionally(ex)
            }
            java
          }
        }

        
            case class registerUser_args(request:com.today36524.api.user.scala.request.RegisterUserRequest)

            case class registerUser_result(success:com.today36524.api.user.scala.response.RegisterUserResponse)

            class RegisterUser_argsSerializer extends BeanSerializer[registerUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): registerUser_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.RegisterUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.RegisterUserRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = registerUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: registerUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("registerUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.RegisterUserRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: registerUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.RegisterUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: registerUser_args): String = if(bean == null)  "null" else bean.toString
          }

            class RegisterUser_resultSerializer extends BeanSerializer[registerUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): registerUser_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.RegisterUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.RegisterUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = registerUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: registerUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("registerUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.RegisterUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: registerUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.RegisterUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: registerUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class registerUser extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, registerUser_args, registerUser_result]("registerUser", new RegisterUser_argsSerializer(), new RegisterUser_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: registerUser_args):Future[registerUser_result] = {

              val _result = iface.registerUser(args.request,50000)

              _result.map(registerUser_result(_)).tojava

            }
          }
          
            case class login_args(request:com.today36524.api.user.scala.request.LoginUserRequest)

            case class login_result(success:com.today36524.api.user.scala.response.LoginUserResponse)

            class Login_argsSerializer extends BeanSerializer[login_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): login_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.LoginUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.LoginUserRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = login_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: login_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("login_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.LoginUserRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: login_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.LoginUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: login_args): String = if(bean == null)  "null" else bean.toString
          }

            class Login_resultSerializer extends BeanSerializer[login_result]{

            @throws[TException]
            override def read(iprot: TProtocol): login_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.LoginUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.LoginUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = login_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: login_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("login_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.LoginUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: login_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.LoginUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: login_result): String = if(bean == null)  "null" else bean.toString
          }

            class login extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, login_args, login_result]("login", new Login_argsSerializer(), new Login_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: login_args):Future[login_result] = {

              val _result = iface.login(args.request,50000)

              _result.map(login_result(_)).tojava

            }
          }
          
            case class modifyUser_args(request:com.today36524.api.user.scala.request.ModifyUserRequest)

            case class modifyUser_result(success:com.today36524.api.user.scala.response.ModifyUserResponse)

            class ModifyUser_argsSerializer extends BeanSerializer[modifyUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): modifyUser_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.ModifyUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.ModifyUserRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = modifyUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: modifyUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("modifyUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.ModifyUserRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: modifyUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.ModifyUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: modifyUser_args): String = if(bean == null)  "null" else bean.toString
          }

            class ModifyUser_resultSerializer extends BeanSerializer[modifyUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): modifyUser_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.ModifyUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.ModifyUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = modifyUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: modifyUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("modifyUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.ModifyUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: modifyUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.ModifyUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: modifyUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class modifyUser extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, modifyUser_args, modifyUser_result]("modifyUser", new ModifyUser_argsSerializer(), new ModifyUser_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: modifyUser_args):Future[modifyUser_result] = {

              val _result = iface.modifyUser(args.request,50000)

              _result.map(modifyUser_result(_)).tojava

            }
          }
          
            case class freezeUser_args(request:com.today36524.api.user.scala.request.FreezeUserRequest)

            case class freezeUser_result(success:com.today36524.api.user.scala.response.FreezeUserResponse)

            class FreezeUser_argsSerializer extends BeanSerializer[freezeUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): freezeUser_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.FreezeUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.FreezeUserRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = freezeUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: freezeUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("freezeUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.FreezeUserRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: freezeUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.FreezeUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: freezeUser_args): String = if(bean == null)  "null" else bean.toString
          }

            class FreezeUser_resultSerializer extends BeanSerializer[freezeUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): freezeUser_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.FreezeUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.FreezeUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = freezeUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: freezeUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("freezeUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.FreezeUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: freezeUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.FreezeUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: freezeUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class freezeUser extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, freezeUser_args, freezeUser_result]("freezeUser", new FreezeUser_argsSerializer(), new FreezeUser_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: freezeUser_args):Future[freezeUser_result] = {

              val _result = iface.freezeUser(args.request,50000)

              _result.map(freezeUser_result(_)).tojava

            }
          }
          
            case class blackUser_args(request:com.today36524.api.user.scala.request.BlackUserRequest)

            case class blackUser_result(success:com.today36524.api.user.scala.response.BlackUserResponse)

            class BlackUser_argsSerializer extends BeanSerializer[blackUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): blackUser_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.BlackUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.BlackUserRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = blackUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: blackUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("blackUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.BlackUserRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: blackUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.BlackUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: blackUser_args): String = if(bean == null)  "null" else bean.toString
          }

            class BlackUser_resultSerializer extends BeanSerializer[blackUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): blackUser_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.BlackUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.BlackUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = blackUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: blackUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("blackUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.BlackUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: blackUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.BlackUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: blackUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class blackUser extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, blackUser_args, blackUser_result]("blackUser", new BlackUser_argsSerializer(), new BlackUser_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: blackUser_args):Future[blackUser_result] = {

              val _result = iface.blackUser(args.request,50000)

              _result.map(blackUser_result(_)).tojava

            }
          }
          
            case class changeUserIntegral_args(request:com.today36524.api.user.scala.request.ChangeIntegralRequest)

            case class changeUserIntegral_result(success:Int)

            class ChangeUserIntegral_argsSerializer extends BeanSerializer[changeUserIntegral_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): changeUserIntegral_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.ChangeIntegralRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.ChangeIntegralRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = changeUserIntegral_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: changeUserIntegral_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("changeUserIntegral_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.ChangeIntegralRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: changeUserIntegral_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.ChangeIntegralRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: changeUserIntegral_args): String = if(bean == null)  "null" else bean.toString
          }

            class ChangeUserIntegral_resultSerializer extends BeanSerializer[changeUserIntegral_result]{

            @throws[TException]
            override def read(iprot: TProtocol): changeUserIntegral_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : Int = 0

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.I32 =>  success = iprot.readI32
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = changeUserIntegral_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: changeUserIntegral_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("changeUserIntegral_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.I32, 0.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: changeUserIntegral_result): Unit = {
      
    }
    

            override def toString(bean: changeUserIntegral_result): String = if(bean == null)  "null" else bean.toString
          }

            class changeUserIntegral extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, changeUserIntegral_args, changeUserIntegral_result]("changeUserIntegral", new ChangeUserIntegral_argsSerializer(), new ChangeUserIntegral_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: changeUserIntegral_args):Future[changeUserIntegral_result] = {

              val _result = iface.changeUserIntegral(args.request,50000)

              _result.map(changeUserIntegral_result(_)).tojava

            }
          }
          
            case class unfreezeUser_args(request:com.today36524.api.user.scala.request.UnfreezeUserRequest)

            case class unfreezeUser_result(success:com.today36524.api.user.scala.response.UnfreezeUserResponse)

            class UnfreezeUser_argsSerializer extends BeanSerializer[unfreezeUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): unfreezeUser_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.UnfreezeUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.UnfreezeUserRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = unfreezeUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: unfreezeUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("unfreezeUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.UnfreezeUserRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: unfreezeUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.UnfreezeUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: unfreezeUser_args): String = if(bean == null)  "null" else bean.toString
          }

            class UnfreezeUser_resultSerializer extends BeanSerializer[unfreezeUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): unfreezeUser_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.UnfreezeUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.UnfreezeUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = unfreezeUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: unfreezeUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("unfreezeUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.UnfreezeUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: unfreezeUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.UnfreezeUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: unfreezeUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class unfreezeUser extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, unfreezeUser_args, unfreezeUser_result]("unfreezeUser", new UnfreezeUser_argsSerializer(), new UnfreezeUser_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: unfreezeUser_args):Future[unfreezeUser_result] = {

              val _result = iface.unfreezeUser(args.request,50000)

              _result.map(unfreezeUser_result(_)).tojava

            }
          }
          
            case class getUser_args(request:com.today36524.api.user.scala.request.GetUserRequest)

            case class getUser_result(success:com.today36524.api.user.scala.response.GetUserResponse)

            class GetUser_argsSerializer extends BeanSerializer[getUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): getUser_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.GetUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.GetUserRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = getUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: getUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.GetUserRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: getUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.GetUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: getUser_args): String = if(bean == null)  "null" else bean.toString
          }

            class GetUser_resultSerializer extends BeanSerializer[getUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): getUser_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.GetUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = getUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: getUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: getUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: getUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class getUser extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, getUser_args, getUser_result]("getUser", new GetUser_argsSerializer(), new GetUser_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: getUser_args):Future[getUser_result] = {

              val _result = iface.getUser(args.request,50000)

              _result.map(getUser_result(_)).tojava

            }
          }
          
            case class getUserByTelephone_args(request:com.today36524.api.user.scala.request.GetUserByTelephoneRequest)

            case class getUserByTelephone_result(success:com.today36524.api.user.scala.response.GetUserResponse)

            class GetUserByTelephone_argsSerializer extends BeanSerializer[getUserByTelephone_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): getUserByTelephone_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.GetUserByTelephoneRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.GetUserByTelephoneRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = getUserByTelephone_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: getUserByTelephone_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUserByTelephone_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.GetUserByTelephoneRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: getUserByTelephone_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.GetUserByTelephoneRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: getUserByTelephone_args): String = if(bean == null)  "null" else bean.toString
          }

            class GetUserByTelephone_resultSerializer extends BeanSerializer[getUserByTelephone_result]{

            @throws[TException]
            override def read(iprot: TProtocol): getUserByTelephone_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.GetUserResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = getUserByTelephone_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: getUserByTelephone_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getUserByTelephone_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: getUserByTelephone_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: getUserByTelephone_result): String = if(bean == null)  "null" else bean.toString
          }

            class getUserByTelephone extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, getUserByTelephone_args, getUserByTelephone_result]("getUserByTelephone", new GetUserByTelephone_argsSerializer(), new GetUserByTelephone_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: getUserByTelephone_args):Future[getUserByTelephone_result] = {

              val _result = iface.getUserByTelephone(args.request,50000)

              _result.map(getUserByTelephone_result(_)).tojava

            }
          }
          
            case class findUsersByPage_args(request:com.today36524.api.user.scala.request.FindUsersByPageRequest)

            case class findUsersByPage_result(success:com.today36524.api.user.scala.response.FindUsersByPageResponse)

            class FindUsersByPage_argsSerializer extends BeanSerializer[findUsersByPage_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findUsersByPage_args = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.scala.request.FindUsersByPageRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => request = 
          new com.today36524.api.user.scala.request.serializer.FindUsersByPageRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findUsersByPage_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findUsersByPage_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("findUsersByPage_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("request", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.request.serializer.FindUsersByPageRequestSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findUsersByPage_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.scala.request.serializer.FindUsersByPageRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: findUsersByPage_args): String = if(bean == null)  "null" else bean.toString
          }

            class FindUsersByPage_resultSerializer extends BeanSerializer[findUsersByPage_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findUsersByPage_result = {

              var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.scala.response.FindUsersByPageResponse = null

              while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                  case 0 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT =>  success = 
          new com.today36524.api.user.scala.response.serializer.FindUsersByPageResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findUsersByPage_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findUsersByPage_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("findUsersByPage_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
            
          new com.today36524.api.user.scala.response.serializer.FindUsersByPageResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findUsersByPage_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.scala.response.serializer.FindUsersByPageResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: findUsersByPage_result): String = if(bean == null)  "null" else bean.toString
          }

            class findUsersByPage extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, findUsersByPage_args, findUsersByPage_result]("findUsersByPage", new FindUsersByPage_argsSerializer(), new FindUsersByPage_resultSerializer()){

            @throws[TException]
            def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: findUsersByPage_args):Future[findUsersByPage_result] = {

              val _result = iface.findUsersByPage(args.request,50000)

              _result.map(findUsersByPage_result(_)).tojava

            }
          }
          

        case class getServiceMetadata_args()

        case class getServiceMetadata_result(success: String)

        class GetServiceMetadata_argsSerializer extends BeanSerializer[getServiceMetadata_args] {

          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_args = {

            iprot.readStructBegin

            var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null

            while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              iprot.readFieldEnd
            }

            iprot.readStructEnd

            val bean = getServiceMetadata_args()
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_args): Unit = {}

          override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
        }



        class GetServiceMetadata_resultSerializer extends BeanSerializer[getServiceMetadata_result] {
          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_result = {
            iprot.readStructBegin

            var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null

            var success: String = null

            while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin

              schemeField.id match {
                case 0 =>
                schemeField.`type` match {
                  case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }
                case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              }
              iprot.readFieldEnd
            }

            iprot.readStructEnd
            val bean = getServiceMetadata_result(success)
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

            oproto.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
            oproto.writeString(bean.success)
            oproto.writeFieldEnd

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_result): Unit = {
            if (bean.success == null)
            throw new SoaException(SoaCode.NotNull, "success字段不允许为空")
          }

          override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

        }



        class getServiceMetadata extends SoaFunctionDefinition.Async[com.today36524.api.user.scala.service.UserServiceAsync, getServiceMetadata_args, getServiceMetadata_result](
        "getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {


          @throws[TException]
          override def apply(iface: com.today36524.api.user.scala.service.UserServiceAsync, args: getServiceMetadata_args): Future[getServiceMetadata_result] = {

            val result = scala.concurrent.Future {
            val source = scala.io.Source.fromInputStream(UserServiceCodec.getClass.getClassLoader.getResourceAsStream("com.today36524.api.user.service.UserService.xml"))
            val success = source.mkString
            source.close
            getServiceMetadata_result(success)
            }
            result.tojava

          }
        }

        class Processor(iface: com.today36524.api.user.scala.service.UserServiceAsync, ifaceClass: Class[com.today36524.api.user.scala.service.UserServiceAsync]) extends
        SoaServiceDefinition(iface,classOf[com.today36524.api.user.scala.service.UserServiceAsync], Processor.buildMap)

        object Processor{

          type PF = SoaFunctionDefinition[com.today36524.api.user.scala.service.UserServiceAsync, _, _]

          def buildMap(): java.util.Map[String, PF] = {
            val map = new java.util.HashMap[String, PF]()
            map.put("registerUser", new registerUser)
              map.put("login", new login)
              map.put("modifyUser", new modifyUser)
              map.put("freezeUser", new freezeUser)
              map.put("blackUser", new blackUser)
              map.put("changeUserIntegral", new changeUserIntegral)
              map.put("unfreezeUser", new unfreezeUser)
              map.put("getUser", new getUser)
              map.put("getUserByTelephone", new getUserByTelephone)
              map.put("findUsersByPage", new findUsersByPage)
              
            map.put("getServiceMetadata", new getServiceMetadata)
            map
          }

        }
      }
      