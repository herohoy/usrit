 package com.today36524.api.user.scala.request.serializer;

        import com.today36524.api.user.scala.request.serializer._;import com.today36524.api.common.scala.domain.serializer._;import com.today36524.api.user.scala.response.serializer._;
        import com.github.dapeng.core._
        import com.github.dapeng.org.apache.thrift._
        import com.github.dapeng.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class FindUsersByPageRequestSerializer extends BeanSerializer[com.today36524.api.user.scala.request.FindUsersByPageRequest]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.today36524.api.user.scala.request.FindUsersByPageRequest = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var userName: Option[String] = None
        var telephone: Option[String] = None
        var email: Option[String] = None
        var qq: Option[String] = None
        var status: Option[com.today36524.api.user.scala.enums.UserStatusEnum] = None
        var createdAtBg: Option[String] = None
        var createdAtEd: Option[String] = None
        var updatedByBg: Option[String] = None
        var updatedByEd: Option[String] = None
        var pageRequest: com.today36524.api.common.scala.domain.PageRequest = null
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => userName = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => telephone = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 3 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => email = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 4 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => qq = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 5 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.I32 => status = Option(
          com.today36524.api.user.scala.enums.UserStatusEnum.findByValue(iprot.readI32)
        )
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 6 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => createdAtBg = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 7 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => createdAtEd = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 8 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => updatedByBg = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 9 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => updatedByEd = Option(iprot.readString)
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 10 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => pageRequest = 
          new com.today36524.api.common.scala.domain.serializer.PageRequestSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.today36524.api.user.scala.request.FindUsersByPageRequest(userName = userName,telephone = telephone,email = email,qq = qq,status = status,createdAtBg = createdAtBg,createdAtEd = createdAtEd,updatedByBg = updatedByBg,updatedByEd = updatedByEd,pageRequest = pageRequest)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.today36524.api.user.scala.request.FindUsersByPageRequest, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("FindUsersByPageRequest"))

      
            if(bean.userName.isDefined){
            val elem0 = bean.userName .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("userName", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 1.asInstanceOf[Short]))
            oprot.writeString(elem0)
            oprot.writeFieldEnd
            
            }
            if(bean.telephone.isDefined){
            val elem1 = bean.telephone .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("telephone", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 2.asInstanceOf[Short]))
            oprot.writeString(elem1)
            oprot.writeFieldEnd
            
            }
            if(bean.email.isDefined){
            val elem2 = bean.email .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("email", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 3.asInstanceOf[Short]))
            oprot.writeString(elem2)
            oprot.writeFieldEnd
            
            }
            if(bean.qq.isDefined){
            val elem3 = bean.qq .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("qq", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 4.asInstanceOf[Short]))
            oprot.writeString(elem3)
            oprot.writeFieldEnd
            
            }
            if(bean.status.isDefined){
            val elem4 = bean.status .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("status", com.github.dapeng.org.apache.thrift.protocol.TType.I32, 5.asInstanceOf[Short]))
            oprot.writeI32(elem4.id)
            oprot.writeFieldEnd
            
            }
            if(bean.createdAtBg.isDefined){
            val elem5 = bean.createdAtBg .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("createdAtBg", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 6.asInstanceOf[Short]))
            oprot.writeString(elem5)
            oprot.writeFieldEnd
            
            }
            if(bean.createdAtEd.isDefined){
            val elem6 = bean.createdAtEd .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("createdAtEd", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 7.asInstanceOf[Short]))
            oprot.writeString(elem6)
            oprot.writeFieldEnd
            
            }
            if(bean.updatedByBg.isDefined){
            val elem7 = bean.updatedByBg .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("updatedByBg", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 8.asInstanceOf[Short]))
            oprot.writeString(elem7)
            oprot.writeFieldEnd
            
            }
            if(bean.updatedByEd.isDefined){
            val elem8 = bean.updatedByEd .get
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("updatedByEd", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 9.asInstanceOf[Short]))
            oprot.writeString(elem8)
            oprot.writeFieldEnd
            
            }
            {
            val elem9 = bean.pageRequest 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("pageRequest", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 10.asInstanceOf[Short]))
            
          new com.today36524.api.common.scala.domain.serializer.PageRequestSerializer().write(elem9, oprot)
        
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.today36524.api.user.scala.request.FindUsersByPageRequest): Unit = {
      
              if(bean.pageRequest == null)
              throw new SoaException(SoaCode.NotNull, "pageRequest字段不允许为空")
            
                if(bean.pageRequest != null)
                new com.today36524.api.common.scala.domain.serializer.PageRequestSerializer().validate(bean.pageRequest)
              
    }
    

          @throws[TException]
          override def toString(bean: com.today36524.api.user.scala.request.FindUsersByPageRequest): String = if (bean == null) "null" else bean.toString

        }
        
      