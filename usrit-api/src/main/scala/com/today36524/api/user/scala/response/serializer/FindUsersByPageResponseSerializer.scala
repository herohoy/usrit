 package com.today36524.api.user.scala.response.serializer;

        import com.today36524.api.user.scala.request.serializer._;import com.today36524.api.common.scala.domain.serializer._;import com.today36524.api.user.scala.response.serializer._;
        import com.github.dapeng.core._
        import com.github.dapeng.org.apache.thrift._
        import com.github.dapeng.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class FindUsersByPageResponseSerializer extends BeanSerializer[com.today36524.api.user.scala.response.FindUsersByPageResponse]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.today36524.api.user.scala.response.FindUsersByPageResponse = {

        var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var pageResponse: com.today36524.api.common.scala.domain.PageResponse = null
        var results: List[com.today36524.api.user.scala.response.GetUserResponse] = List.empty
        

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => pageResponse = 
          new com.today36524.api.common.scala.domain.serializer.PageResponseSerializer().read(iprot)
        
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.github.dapeng.org.apache.thrift.protocol.TType.LIST => results = {
        val _list0 : com.github.dapeng.org.apache.thrift.protocol.TList = iprot.readListBegin
        val _result0 = (0 until _list0.size).map(_ => {
          new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().read(iprot)
        }).toList
        iprot.readListEnd
        _result0
        }
                    case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.today36524.api.user.scala.response.FindUsersByPageResponse(pageResponse = pageResponse,results = results)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.today36524.api.user.scala.response.FindUsersByPageResponse, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("FindUsersByPageResponse"))

      
            {
            val elem0 = bean.pageResponse 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("pageResponse", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
            
          new com.today36524.api.common.scala.domain.serializer.PageResponseSerializer().write(elem0, oprot)
        
            oprot.writeFieldEnd
            
            }
            {
            val elem1 = bean.results 
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("results", com.github.dapeng.org.apache.thrift.protocol.TType.LIST, 2.asInstanceOf[Short]))
            
        oprot.writeListBegin(new com.github.dapeng.org.apache.thrift.protocol.TList(com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, elem1.size))
        elem1.foreach(elem2 => {
          new com.today36524.api.user.scala.response.serializer.GetUserResponseSerializer().write(elem2, oprot)
        })
        oprot.writeListEnd
      
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.today36524.api.user.scala.response.FindUsersByPageResponse): Unit = {
      
              if(bean.pageResponse == null)
              throw new SoaException(SoaCode.NotNull, "pageResponse字段不允许为空")
            
                if(bean.pageResponse != null)
                new com.today36524.api.common.scala.domain.serializer.PageResponseSerializer().validate(bean.pageResponse)
              
              if(bean.results == null)
              throw new SoaException(SoaCode.NotNull, "results字段不允许为空")
            
    }
    

          @throws[TException]
          override def toString(bean: com.today36524.api.user.scala.response.FindUsersByPageResponse): String = if (bean == null) "null" else bean.toString

        }
        
      